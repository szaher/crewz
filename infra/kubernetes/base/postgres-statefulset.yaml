apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  labels:
    app: postgres
    component: database
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        component: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: "crewai_platform"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata

        # Performance tuning
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"

        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "4"
            memory: "8Gi"

        volumeMounts:
        - name: data
          mountPath: /var/lib/postgresql/data
        - name: config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d

        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6

        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

      volumes:
      - name: config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: postgres
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "standard"
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app: postgres

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  labels:
    app: postgres
data:
  postgresql.conf: |
    # Connection Settings
    max_connections = 200
    shared_buffers = 2GB

    # Memory Settings
    effective_cache_size = 6GB
    maintenance_work_mem = 512MB
    work_mem = 10MB

    # Write Ahead Log
    wal_level = replica
    max_wal_size = 2GB
    min_wal_size = 1GB
    wal_buffers = 16MB

    # Query Tuning
    random_page_cost = 1.1
    effective_io_concurrency = 200
    default_statistics_target = 100

    # Parallel Queries
    max_worker_processes = 4
    max_parallel_workers_per_gather = 2
    max_parallel_workers = 4

    # Logging
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_min_duration_statement = 1000
    log_connections = on
    log_disconnections = on
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

    # Vacuum and Analyze
    autovacuum = on
    autovacuum_max_workers = 3
    autovacuum_naptime = 60s

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  labels:
    app: postgres
data:
  01-create-extensions.sql: |
    -- Enable required PostgreSQL extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";

  02-create-template-schema.sql: |
    -- Create template schema for multi-tenant architecture
    -- This schema will be copied for each new tenant

    CREATE SCHEMA IF NOT EXISTS tenant_template;

    -- Set search path
    SET search_path TO tenant_template;

    -- Create tenant-specific tables in template schema
    -- These will be copied when a new tenant is created

    CREATE TABLE IF NOT EXISTS users (
      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
      tenant_id UUID NOT NULL,
      email VARCHAR(255) NOT NULL,
      password_hash VARCHAR(255) NOT NULL,
      role VARCHAR(50) NOT NULL,
      status VARCHAR(50) NOT NULL,
      preferences JSONB DEFAULT '{}',
      created_at TIMESTAMP NOT NULL DEFAULT NOW(),
      last_login TIMESTAMP,
      UNIQUE(tenant_id, email)
    );

    CREATE INDEX idx_users_tenant ON users(tenant_id);
    CREATE INDEX idx_users_email ON users(email);

    -- Add other tenant tables here...
    -- (agents, crews, flows, tools, executions, chat_sessions, llm_providers)

---
apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init
  labels:
    app: postgres
spec:
  template:
    spec:
      containers:
      - name: init
        image: postgres:15-alpine
        command:
        - /bin/sh
        - -c
        - |
          until pg_isready -h postgres -U $POSTGRES_USER; do
            echo "Waiting for postgres..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
          psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB -f /scripts/init.sql
        env:
        - name: POSTGRES_DB
          value: "crewai_platform"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: postgres-user
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: postgres-password
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: postgres-init-scripts
      restartPolicy: OnFailure
