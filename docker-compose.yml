services:
  # PostgreSQL - Primary database for tenant schemas, users, flows, executions
  postgres:
    image: postgres:15-alpine
    container_name: crewai-postgres
    environment:
      POSTGRES_USER: crewai
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: crewai_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crewai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Secondary database for execution logs, chat history, audit logs
  mongodb:
    image: mongo:6.0
    container_name: crewai-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: crewai
      MONGO_INITDB_ROOT_PASSWORD: dev_password
      MONGO_INITDB_DATABASE: crewai_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Pub/Sub for execution events and caching
  redis:
    image: redis:7-alpine
    container_name: crewai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API - FastAPI application
  backend:
    build:
      context: .
      dockerfile: infra/docker/backend.Dockerfile
      target: development
    container_name: crewai-backend
    environment:
      - DATABASE_URL=postgresql://crewai:dev_password@postgres:5432/crewai_platform
      - MONGODB_URL=mongodb://crewai:dev_password@mongodb:27017/
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=dev_secret_change_in_production
      - FRONTEND_URL=http://localhost:3000
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker tool execution
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend - Next.js application
  frontend:
    build:
      context: .
      dockerfile: infra/docker/frontend.Dockerfile
      target: development
    container_name: crewai-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - API_URL=http://backend:8000
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: crewai-network
