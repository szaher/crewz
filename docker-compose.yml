services:
  # PostgreSQL - Primary database for tenant schemas, users, flows, executions
  postgres:
    image: postgres:15-alpine
    container_name: crewai-postgres
    environment:
      POSTGRES_USER: crewai
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: crewai_platform
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crewai"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - Secondary database for execution logs, chat history, audit logs
  mongodb:
    image: mongo:6.0
    container_name: crewai-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: crewai
      MONGO_INITDB_ROOT_PASSWORD: dev_password
      MONGO_INITDB_DATABASE: crewai_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Pub/Sub for execution events and caching
  redis:
    image: redis:7-alpine
    container_name: crewai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse - Analytics database for feedback and metrics
  clickhouse:
    image: clickhouse/clickhouse-server:23.8-alpine
    container_name: crewai-clickhouse
    environment:
      CLICKHOUSE_DB: crewai_analytics
      CLICKHOUSE_USER: crewai
      CLICKHOUSE_PASSWORD: dev_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    ports:
      - "8123:8123"  # HTTP interface
      - "9000:9000"  # Native protocol
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./backend/scripts/clickhouse-init.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API - FastAPI application
  backend:
    build:
      context: .
      dockerfile: infra/docker/backend.Dockerfile
      target: development
    container_name: crewai-backend
    environment:
      - DATABASE_URL=postgresql://crewai:dev_password@postgres:5432/crewai_platform
      - MONGODB_URL=mongodb://crewai:dev_password@mongodb:27017/
      - REDIS_URL=redis://redis:6379/0
      - ENCRYPTION_KEY=QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE=
      - ALLOWED_ORIGINS=http://localhost:3001,http://localhost:3000,http://frontend:3000
      - ALLOWED_ORIGIN_REGEX=${ALLOWED_ORIGIN_REGEX:-^https?://(localhost|127\.0\.0\.1|frontend|192\.168\.[0-9]+\.[0-9]+)(:[0-9]+)?$}
      - ALLOW_ALL_ORIGINS=${ALLOW_ALL_ORIGINS:-true}
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=9000
      - CLICKHOUSE_USER=crewai
      - CLICKHOUSE_PASSWORD=dev_password
      - CLICKHOUSE_DATABASE=crewai_analytics
      - JWT_SECRET=dev_secret_change_in_production
      # Toggle verbosity via env (override in your shell or .env)
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - LOG_HTTP=${LOG_HTTP:-false}
      - SQL_ECHO=${SQL_ECHO:-false}
      - UVICORN_LOG_LEVEL=${UVICORN_LOG_LEVEL:-info}
      - FRONTEND_URL=http://localhost:3000
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker tool execution
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    command: /bin/sh -lc "uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload --log-level ${UVICORN_LOG_LEVEL:-info}"

  # Frontend - Next.js application
  frontend:
    build:
      context: .
      dockerfile: infra/docker/frontend.Dockerfile
      target: development
    container_name: crewai-frontend
    environment:
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - API_URL=http://backend:8000
      - HOST=0.0.0.0
    ports:
      - "3001:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: sh -lc 'npm run dev -- -H 0.0.0.0'

volumes:
  postgres_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local

networks:
  default:
    name: crewai-network
